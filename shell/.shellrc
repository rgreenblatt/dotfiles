#!/usr/bin/env bash
# This may be sourced by bash or zsh, shebang is just for filetype

#setup {{{1
if [ -z "$PROFILE_SOURCED" ]; then
  \. "${CONFIG_HOME:-$HOME}/.profile"
fi

if [ -n "${NVIM_LISTEN_ADDRESS+x}" ]; then
  export COLORTERM="truecolor"
fi

#history {{{1
export HISTSIZE=100000
export SAVEHIST=200000
export HISTFILE=~/.shell_history

#aliases and functions {{{1
#ls {{{2
ls_command() {
  if hash exa 2>/dev/null; then
    exa "$@"
  else
    ls --color=auto "$@"
  fi
}

alias update-grub="sudo grub-mkconfig -o /boot/grub/grub.cfg"
alias l="ls_command"
alias ls="ls_command"
alias sl="ls_command"
alias ll="ls_command -l"
alias la="ls_command -a"
alias lla="ls_command -al"
alias lg="ls_command -l --git"
alias lgi="ls_command -l --git --git-ignore"
alias lt="ls_command -T"
alias lr="ls_command -R"

#docker {{{2
alias d_run_bind='docker run -it -v $HOME:$HOME -w $PWD'
alias d_run_w_bind='~/.d_run_w_bind.sh'
alias d_eval_2016='eval $(docker-machine env 2016)'
alias d_eval_unset='eval $(docker-machine env -u)'
alias d="docker"
alias dr="docker run"

#python {{{2
alias py='python3'
alias python='python3'
alias pip='pip3'
alias bp='bpython'

#generic {{{2
alias cs='cd'
alias o='xdg-open'
alias se='sudoedit'
alias so='source'
alias sr='sudo reboot'
alias di="disown %"
alias bgd="bg && disown %"
alias t='tail -f'
alias h='history'
alias to='htop'
alias si="du -hs * .[^.]* 2> /dev/null | sort -h"
alias rf="rm -rf"
alias tf="tail -f"
alias cr="cp -r"

# these allow aliases to work
alias sudo='sudo '
alias xargs='xargs '
alias time='time '

alias dud='du -d 1 -h'
alias duf='du -sh *'
alias ffi="$FZF_DEFAULT_COMMAND"
alias fdi="$FZF_DIR_COMMAND"

alias e='editor'

red_gap() {
  n=10

  if [ "$#" -gt 0 ]; then
    n=$1
  fi

  for ((i = 0; i < n; i++)); do
    printf '\e[48;5;196m RESET\n'
  done
  printf '\e[0m\n'
}

alias rgap='red_gap'

#git {{{2
mgs() {
  m_path=$(mgs_path "$@") && cd "$m_path"
}

alias mgsd='mgs -e ~ 4'

gprefix='g'

# Git
alias ${gprefix}='git'

git_root_directory() {
  git rev-parse --show-toplevel
}

git_commit_all_submodules() {
  git_root=$(git rev-parse --show-toplevel)
  git config --file "$git_root/.gitmodules" --get-regexp path |
    awk -v gr="$git_root" '{ print gr "/" $2 }' | xargs git add
  git commit --message="Submodule update"
}
alias ${gprefix}cas='git_commit_all_submodules'
alias ${gprefix}k='cd $(git_root_directory)'

# Branch (b)
alias ${gprefix}b='git branch'
alias ${gprefix}bc='git checkout -b'
alias ${gprefix}bl='git branch -vv'
alias ${gprefix}bL='git branch --all -vv'
alias ${gprefix}bm='git branch --move'
alias ${gprefix}bM='git branch --move --force'
alias ${gprefix}bs='git show-branch'
alias ${gprefix}bS='git show-branch --all'
alias ${gprefix}bx='git-branch-delete-interactive'
alias ${gprefix}bX='git-branch-delete-interactive --force'

# Commit (c)
alias ${gprefix}c='git commit --verbose'
alias ${gprefix}ca='git commit --verbose --all'
alias ${gprefix}cm='git commit --message'
alias ${gprefix}co='git checkout'
alias ${gprefix}cO='git checkout --patch'
alias ${gprefix}cf='git commit --amend --reuse-message HEAD'
alias ${gprefix}cF='git commit --verbose --amend'
alias ${gprefix}cp='git cherry-pick --ff'
alias ${gprefix}cP='git cherry-pick --no-commit'
alias ${gprefix}cr='git revert'
alias ${gprefix}cR='git reset "HEAD^"'
alias ${gprefix}cs='git show'
alias ${gprefix}cS='git commit -S'
alias ${gprefix}cv='git verify-commit'

# Conflict (C)
git_conflicting_files() {
  git --no-pager diff --diff-filter=U --name-only
}
alias ${gprefix}Cl='git_conflicting_files'
# disabled for now because I can't seem to stop using this for
# general git add :(
# alias ${gprefix}Ca='git add $(git_conflicting_files)'
alias ${gprefix}Ce='git mergetool $(git_conflicting_files)'
alias ${gprefix}Co='git checkout --ours --'
alias ${gprefix}CO='gCo $(git_conflicting_files)'
alias ${gprefix}Ct='git checkout --theirs --'
alias ${gprefix}CT='gCt $(git_conflicting_files)'

# Data (d)
alias ${gprefix}d='git ls-files'
alias ${gprefix}dc='git ls-files --cached'
alias ${gprefix}dx='git ls-files --deleted'
alias ${gprefix}dm='git ls-files --modified'
alias ${gprefix}du='git ls-files --other --exclude-standard'
alias ${gprefix}dk='git ls-files --killed'
alias ${gprefix}di='git status --porcelain --short --ignored | sed -n "s/^!! //p"'

# Fetch (f)
alias ${gprefix}f='git fetch'
alias ${gprefix}fc='git clone'
alias ${gprefix}fm='git pull'
alias ${gprefix}fr='git pull --rebase'
alias ${gprefix}fu='git fetch --all --prune && git merge --ff-only @\{u\}'

# Grep (g)
alias ${gprefix}g='git grep'
alias ${gprefix}gi='git grep --ignore-case'
alias ${gprefix}gl='git grep --files-with-matches'
alias ${gprefix}gL='git grep --files-without-match'
alias ${gprefix}gv='git grep --invert-match'
alias ${gprefix}gw='git grep --word-regexp'

# Index (i)
alias ${gprefix}ia='git add'
alias ${gprefix}iA='git add --patch'
alias ${gprefix}iu='git add --update'
alias ${gprefix}id='git diff --cached'
alias ${gprefix}iD='git diff --cached --word-diff'
alias ${gprefix}idn='git diff --cached --name-only'
alias ${gprefix}iDn='git diff --cached --word-diff --name-only'
alias ${gprefix}ir='git reset'
alias ${gprefix}iR='git reset --patch'
alias ${gprefix}ix='git rm --cached -r'
alias ${gprefix}iX='git rm --cached -rf'

# Log (l)
alias ${gprefix}l='git log --topo-order'
alias ${gprefix}ls='git log --topo-order --stat'
alias ${gprefix}ld='git log --topo-order --stat --patch --full-diff'
alias ${gprefix}lg='git log --graph'
alias ${gprefix}lv='git log --topo-order --show-signature'
alias ${gprefix}lc='git shortlog --summary --numbered'
alias ${gprefix}lr='git reflog'

# Merge (m)
alias ${gprefix}m='git merge'
alias ${gprefix}ma='git merge --abort'
alias ${gprefix}mC='git merge --no-commit'
alias ${gprefix}mF='git merge --no-ff'
alias ${gprefix}mS='git merge -S'
alias ${gprefix}mv='git merge --verify-signatures'
alias ${gprefix}mt='git mergetool'

# Push (p)
alias ${gprefix}p='git push'
alias ${gprefix}pf='git push --force-with-lease'
alias ${gprefix}pF='git push --force'
alias ${gprefix}pa='git push --all'
alias ${gprefix}pA='git push --all && git push --tags'
alias ${gprefix}pt='git push --tags'
alias ${gprefix}pc='git push --set-upstream origin "$(git-branch-current 2> /dev/null)"'
alias ${gprefix}pp='git pull && git push'

# Rebase (r)
alias ${gprefix}r='git rebase'
alias ${gprefix}ra='git rebase --abort'
alias ${gprefix}rc='git rebase --continue'
alias ${gprefix}ri='git rebase --interactive'
alias ${gprefix}rs='git rebase --skip'

# Remote (R)
alias ${gprefix}R='git remote'
alias ${gprefix}Rl='git remote --verbose'
alias ${gprefix}Ra='git remote add'
alias ${gprefix}Rx='git remote rm'
alias ${gprefix}Rm='git remote rename'
alias ${gprefix}Ru='git remote update'
alias ${gprefix}Re='git remote set-url'
alias ${gprefix}Rp='git remote prune'
alias ${gprefix}Rs='git remote show'

# Stash (s)
alias ${gprefix}s='git stash'
alias ${gprefix}sa='git stash apply'
alias ${gprefix}sx='git stash drop'
alias ${gprefix}sX='git-stash-clear-interactive'
alias ${gprefix}sl='git stash list'
alias ${gprefix}sd='git stash show --patch --stat'
alias ${gprefix}sp='git stash pop'
alias ${gprefix}sr='git-stash-recover'
alias ${gprefix}ss='git stash save --include-untracked'
alias ${gprefix}sS='git stash save --patch --no-keep-index'
alias ${gprefix}sw='git stash save --include-untracked --keep-index'
alias ${gprefix}su='git stash show --patch | git apply --reverse'

# Submodule (S)
alias ${gprefix}S='git submodule'
alias ${gprefix}Sa='git submodule add'
alias ${gprefix}Sf='git submodule foreach'
alias ${gprefix}Si='git submodule init'
alias ${gprefix}SI='git submodule update --init --recursive'
alias ${gprefix}Sl='git submodule status'
alias ${gprefix}Sm='git-submodule-move'
alias ${gprefix}Ss='git submodule sync'
alias ${gprefix}Su='git submodule foreach git pull'
alias ${gprefix}Sx='git-submodule-remove'

# Tag (t)
alias ${gprefix}t='git tag'
alias ${gprefix}ts='git tag --sign'
alias ${gprefix}tv='git verify-tag'
alias ${gprefix}tx='git tag --delete'

# Working tree (w)
alias ${gprefix}ws='git status --short'
alias ${gprefix}wS='git status'
alias ${gprefix}wd='git diff'
alias ${gprefix}wD='git diff --word-diff'
alias ${gprefix}wdi='git diff --no-index'
alias ${gprefix}wDi='git diff --word-diff --no-index'
alias ${gprefix}wdn='git diff --name-only'
alias ${gprefix}wr='git reset --soft'
alias ${gprefix}wR='git reset --hard'
alias ${gprefix}wc='git clean -d --dry-run'
alias ${gprefix}wC='git clean -d --force'
alias ${gprefix}wcx='git clean -d --dry-run -x'
alias ${gprefix}wCx='git clean -d --force -x'

# Misc
alias ${gprefix}..='cd "$(git-root || print .)"'

#slurm {{{2
if hash scancel 2>/dev/null; then
  alias cancel_all='scancel -u guest287'
fi

if hash squeue 2>/dev/null; then
  alias check='squeue -u guest287'
fi

#mounting flash drive {{{2
alias lm="lsblk"
alias am="udisksctl mount -b"

#cargo {{{2
alias c-update='cargo install-update -a'

cargo_command_and_page() {
  cargo --color always "$@" 2>&1 | less -RFX
}

alias c_p='cargo_command_and_page'
alias c_pc='cargo_command_and_page check'
alias c_pb='cargo_command_and_page build'
alias c_pt='cargo_command_and_page test'

#tar {{{2
alias onzt='tar xvf'
alias ot='tar xzvf'
create_tar() {
  name="$(basename "$2")"
  tar "$1" "$name.tar.gz" "$2"
}
alias ct='create_tar czvf'
alias cnzt='create_tar cvf'

#nvim terminal specific settings {{{1
if [ -n "${NVIM_LISTEN_ADDRESS+x}" ]; then
  alias h='nvr -o'
  alias v='nvr -O'
  alias t='nvr --remote-tab'
  alias e='nvr'
  export GIT_TERMINAL_PROMPT=1
  export VISUAL='within_neovim_editor'
  export EDITOR="$VISUAL"
fi

#fzf commands {{{1
# git {{{2
# easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
git_stash_fzf() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
      fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b
  ); do
    mapfile -t out <<<"$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z $sha ]] && continue
    if [[ $k == 'ctrl-d' ]]; then
      git diff "$sha"
    elif [[ $k == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" "$sha"
      break
    else
      git stash show -p "$sha"
    fi
  done
}

alias gsf='git_stash_fzf'

# checkout git branch (including remote branches)
git_checkout_branch_fzf() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
    branch=$(echo "$branches" |
      fzf -d $((2 + $(wc -l <<<"$branches"))) +m) &&
    git checkout "$(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")"
}

alias gcobf='git_checkout_branch_fzf'

# checkout git branch/tag
git_checkout_fzf() {
  local tags branches target
  tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}'
  ) || return
  branches=$(
    git branch --all | grep -v HEAD |
      sed "s/.* //" | sed "s#remotes/[^/]*/##" |
      sort -u | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}'
  ) || return
  target=$(
    (
      echo "$tags"
      echo "$branches"
    ) |
      fzf -l30 -- --no-hscroll --ansi +m -d '\t' -n 2
  ) || return
  git checkout "$(echo "$target" | awk '{print $2}')"
}

alias gcof='git_checkout_fzf'

# checkout git commit
git_checkout_commit_fzf() {
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
    commit=$(echo "$commits" | fzf --tac +s +m -e) &&
    git checkout "$(echo "$commit" | sed "s/ .*//")"
}

alias gcocf='git_checkout_commit_fzf'

# get git commit sha
# example usage: git rebase -i `gcsf`
git_commit_sha_fzf() {
  local commits commit
  commits=$(git log --color=always --oneline --reverse) &&
    commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
    echo -n "$(echo "$commit" | sed "s/ .*//")"
}

alias gcsf='git_commit_sha_fzf'

# misc {{{2
# utility function used to write the command in the shell
writecmd() {
  a='$TIOCSTI = 0x5412; $l = <STDIN>; $lc = $ARGV[0] eq "-run" ? "\n" :'
  b='""; $l =~ s/\s*$/$lc/; map { ioctl STDOUT, $TIOCSTI, $_; } split "", $l;'
  perl -e "$a$b"
}

# cd to selected parent directory
cd_parent_fzf() {
  local dirs
  get_parent_dirs() {
    if [[ -d ${1} ]]; then dirs+=("$1"); else return; fi
    if [[ ${1} == '/' ]]; then
      for _dir in "${dirs[@]}"; do echo "$_dir"; done
    else
      get_parent_dirs "$(dirname "$1")"
    fi
  }
  direc="$(get_parent_dirs "$(realpath "${1:-$(pwd)}")" | fzf --tac)"
  cd "$direc"
}

alias cdp='cd_parent_fzf'

# cd into the directory of the selected file
cd_file_fzf() {
  local file
  local dir
  file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

alias cdf='cd_file_fzf'

# show output of "ps -ef", use [tab] to select one or multiple entries
# press [enter] to kill selected processes and go back to the process list.
# or press [escape] to go back to the process list. Press [escape] twice to exit
# completely.
kill_process_fzf() {
  fzf_cmd="fzf ${FZF_DEFAULT_OPTS} -m --header='[kill:process]'"
  pid=$(ps -ef | sed 1d | eval "$fzf_cmd" | awk '{print $2}')

  if [ "x$pid" != "x" ]; then
    echo "$pid" | xargs kill -"${1:-9}"
    kill_process_fzf "$@"
  fi
}
alias kp=kill_process_fzf

# list directories in $PATH, press [enter] to list the executables inside.
# press [escape] to go back to directory listing, [escape] twice to exit
find_path_fzf() {
  fzf_cmd="fzf ${FZF_DEFAULT_OPTS} --header='[find:path]'"
  loc=$(echo "$PATH" | sed -e $'s/:/\\\n/g' | eval "$fzf_cmd")

  if [[ -d $loc ]]; then
    fzf_cmd="fzf ${FZF_DEFAULT_OPTS} --header='[find:exe] => ${loc}' >/dev/null"
    rg --files "$loc" | rev | cut -d"/" -f1 | rev | eval "$fzf_cmd"
    find_path_fzf
  fi
}

alias fp=find_path_fzf

# Paste the selected executable into the command line
fzf_executables() {
  a="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.."
  b=" --tiebreak=index --bind=ctrl-r:toggle-sort $FZF_CTRL_T_OPTS +m"
  fzf_cmd="$(__fzfcmd)"
  whence -pm "*" | FZF_DEFAULT_OPTS="$a$b" $fzf_cmd | writecmd
}

# pacman + fzf {{{2
base_pac_fzf="fzf --multi --preview 'pacman "
alias pipac="pacman -Slq | $base_pac_fzf -Si {1}' | xargs -ro sudo pacman -S"
alias prpac="pacman -Qq | $base_pac_fzf -Qi {1}' | xargs -ro sudo pacman -Rns"


# vim: set fdm=marker:
